buildscript {
    ext.kotlin_version = '1.1.3-2'
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'



ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}.${config.build_number}"
group = config.group
archivesBaseName = config.mod_name

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "${config.mc_version}-${config.forge_version}"
    runDir = "run"

    mappings = config.mc_mappings
}

repositories {
    mavenCentral()
    maven {
        url "http://mvn.rx14.co.uk/shadowfacts/"
    }
    maven {
        url = "http://maven.bluexin.be/repository/snapshots/"
    }
}
dependencies {
//    compile "com.teamwizardry.librarianlib:librarianlib:3.1.5-SNAPSHOT:deobf"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "net.shadowfacts:Forgelin:1.4.1"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
